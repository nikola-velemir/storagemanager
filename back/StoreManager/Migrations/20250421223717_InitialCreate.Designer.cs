// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StoreManager.Infrastructure.Context;

#nullable disable

namespace StoreManager.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20250421223717_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StoreManager.Domain.Auth.Tokens.RefreshToken.Model.RefreshTokenModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "public");
                });

            modelBuilder.Entity("StoreManager.Domain.BusinessPartner.Base.Model.BusinessPartnerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BusinessPartners", "public");

                    b.HasDiscriminator<int>("Type").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StoreManager.Domain.Document.Model.DocumentChunkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChunkNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupaBasePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SupaBasePath")
                        .IsUnique();

                    b.ToTable("DocumentChunks", "public");
                });

            modelBuilder.Entity("StoreManager.Domain.Document.Model.DocumentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.ToTable("Documents", "public");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Base.InvoiceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateIssued")
                        .HasColumnType("date");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("Invoices", "public");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Export.Model.ExportItemModel", b =>
                {
                    b.Property<Guid>("ExportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<double>("PricePerPiece")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ExportId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ExportItems", "public");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Import.Model.ImportItemModel", b =>
                {
                    b.Property<Guid>("ImportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<double>("PricePerPiece")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ImportId", "ComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("ImportItems", "public");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.MechanicalComponent.Model.MechanicalComponentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Identifier");

                    b.ToTable("MechanicalComponents", "public");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Product.Model.ProductComponentsModel", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<int>("UsedQuantity")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "ComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("ProductComponents", "public");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Product.Model.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("Products", "public");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.User.Model.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("StoreManager.Domain.BusinessPartner.Exporter.Model.ExporterModel", b =>
                {
                    b.HasBaseType("StoreManager.Domain.BusinessPartner.Base.Model.BusinessPartnerModel");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("StoreManager.Domain.BusinessPartner.Provider.Model.ProviderModel", b =>
                {
                    b.HasBaseType("StoreManager.Domain.BusinessPartner.Base.Model.BusinessPartnerModel");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Export.Model.ExportModel", b =>
                {
                    b.HasBaseType("StoreManager.Infrastructure.Invoice.Base.InvoiceModel");

                    b.Property<Guid>("ExporterId")
                        .HasColumnType("uuid");

                    b.HasIndex("ExporterId");

                    b.ToTable("Exports", "public");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Import.Model.ImportModel", b =>
                {
                    b.HasBaseType("StoreManager.Infrastructure.Invoice.Base.InvoiceModel");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProviderModelId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProviderModelId");

                    b.ToTable("Imports", "public");
                });

            modelBuilder.Entity("StoreManager.Domain.Auth.Tokens.RefreshToken.Model.RefreshTokenModel", b =>
                {
                    b.HasOne("StoreManager.Infrastructure.User.Model.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StoreManager.Domain.BusinessPartner.Base.Model.BusinessPartnerModel", b =>
                {
                    b.OwnsOne("StoreManager.Domain.BusinessPartner.Shared.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BusinessPartnerModelId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("Longitude");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("BusinessPartnerModelId");

                            b1.ToTable("BusinessPartners", "public");

                            b1.WithOwner()
                                .HasForeignKey("BusinessPartnerModelId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("StoreManager.Domain.Document.Model.DocumentChunkModel", b =>
                {
                    b.HasOne("StoreManager.Domain.Document.Model.DocumentModel", "Document")
                        .WithMany("Chunks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Base.InvoiceModel", b =>
                {
                    b.HasOne("StoreManager.Domain.Document.Model.DocumentModel", "Document")
                        .WithOne()
                        .HasForeignKey("StoreManager.Infrastructure.Invoice.Base.InvoiceModel", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Export.Model.ExportItemModel", b =>
                {
                    b.HasOne("StoreManager.Infrastructure.Invoice.Export.Model.ExportModel", "Export")
                        .WithMany("Items")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManager.Infrastructure.Product.Model.ProductModel", "Product")
                        .WithMany("Exports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Export");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Import.Model.ImportItemModel", b =>
                {
                    b.HasOne("StoreManager.Infrastructure.MechanicalComponent.Model.MechanicalComponentModel", "Component")
                        .WithMany("Items")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManager.Infrastructure.Invoice.Import.Model.ImportModel", "Import")
                        .WithMany("Items")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Import");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Product.Model.ProductComponentsModel", b =>
                {
                    b.HasOne("StoreManager.Infrastructure.MechanicalComponent.Model.MechanicalComponentModel", "Component")
                        .WithMany("Products")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManager.Infrastructure.Product.Model.ProductModel", "Product")
                        .WithMany("Components")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Export.Model.ExportModel", b =>
                {
                    b.HasOne("StoreManager.Domain.BusinessPartner.Exporter.Model.ExporterModel", "Exporter")
                        .WithMany("Exports")
                        .HasForeignKey("ExporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManager.Infrastructure.Invoice.Base.InvoiceModel", null)
                        .WithOne()
                        .HasForeignKey("StoreManager.Infrastructure.Invoice.Export.Model.ExportModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exporter");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Import.Model.ImportModel", b =>
                {
                    b.HasOne("StoreManager.Infrastructure.Invoice.Base.InvoiceModel", null)
                        .WithOne()
                        .HasForeignKey("StoreManager.Infrastructure.Invoice.Import.Model.ImportModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManager.Domain.BusinessPartner.Provider.Model.ProviderModel", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreManager.Domain.BusinessPartner.Provider.Model.ProviderModel", null)
                        .WithMany("Imports")
                        .HasForeignKey("ProviderModelId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("StoreManager.Domain.Document.Model.DocumentModel", b =>
                {
                    b.Navigation("Chunks");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.MechanicalComponent.Model.MechanicalComponentModel", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Product.Model.ProductModel", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Exports");
                });

            modelBuilder.Entity("StoreManager.Domain.BusinessPartner.Exporter.Model.ExporterModel", b =>
                {
                    b.Navigation("Exports");
                });

            modelBuilder.Entity("StoreManager.Domain.BusinessPartner.Provider.Model.ProviderModel", b =>
                {
                    b.Navigation("Imports");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Export.Model.ExportModel", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("StoreManager.Infrastructure.Invoice.Import.Model.ImportModel", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
